Please answer the below Data Structure Questions:

why do we need data structure?
A.
Data Structures are used to increase the efficiency and performance of an application by organizing the data in such
a manner that it requires less space with higher processing speed. They allow us to efficiently store, retrieve, and
manipulate data in a variety of different ways,


What are the various operations that can be performed on different Data Structures?
Traversing, Insertion ,Deletion , Searching , Sorting, Merging



List out the areas in which data structures are applied extensively?


Compiler Design, Operating System, Database Management System, Statistical analysis package,
Numerical Analysis, Graphics, Artificial Intelligence, Simulation

what is an Array?
An array is a collection of elements that are stored in a contiguous block of memory and can be accessed using indices (numbers).
Each element in the array has a specific index, starting from 0, and can be accessed or modified using that index


what is the difference between the Array and ArrayList?

The main difference between an Array and an ArrayList is that an Array is a fixed-size data structure, while an ArrayList is a resizable,
dynamic data structure. This means that an Array has a fixed number of elements that cannot be changed,
while an ArrayList can have elements added or removed as needed.

what is LinkedList?

A LinkedList in Java is a linear data structure that consists of a set of nodes where each node stores a reference to the next node
in the list.It is called a linked list because each node is "linked" to the next node in the list by this reference.

How is an Array different from Linked List?
An array is a collection of elements that are stored in a contiguous block of memory. It is a static data structure, meaning that
the size of the array must be specified at the time of its creation and cannot be changed afterwards.

On the other hand, a linked list is a dynamic data structure in which each element (called a node) is stored in a separate block of memory
and is connected to the next element through a pointer. The size of a linked list can be changed at runtime, as new nodes can be added or
existing nodes can be removed.

what is queue?
A queue in Java is a data structure that allows for the insertion of elements at the end of the queue (rear) and the removal of elements
from the front of the queue. It follows the First-In-First-Out (FIFO) principle, meaning that the first element added to the queue is the
first one to be removed.

what is stack?
A stack in Java is a linear data structure that follows the Last-In-First-Out (LIFO) principle. This means that the last element added
to the stack is the first one to be removed. A stack is used to store and manage data in a program and can be implemented using an array
or a linked list. It has a fixed size or can be dynamically resized.


what is FIFO and LIFO?
FIFO stands for First In First Out, and LIFO stands for Last In First Out.
These are two different ways to manage a queue or stack data structure in Java.


what is the order of complexity?

The order of complexity in Java is as follows:

Constant time (O(1))
Logarithmic time (O(log n))
Linear time (O(n))
Quadratic time (O(n^2))
Cubic time (O(n^3))
Exponential time (O(2^n))


what is the best case to search an element from an array?

The best case for searching an element from an array is when the element is the first element in the array.



what is the worst case to search an element from an array?

The worst case to search for an element from an array is when the element is not present in the array
and the search algorithm has to check every element in the array before determining that the element is not present.

or

in leaner search ,  searching a key at the last index w(n)= o(n).
in binary search , worst case will be searching for leaf elements.

what is tree in data structure?

A tree is a data structure that consists of nodes arranged in a hierarchical structure.
Each node in the tree has one or more child nodes, and one parent node (except for the root node, which has no parent).

what is graph in data structure?

Graphs in data structures are non-linear data structures made up of a finite number of nodes or vertices and the edges that connect them.




what is the difference between the HashTable and HashMap?

There are several differences between the HashTable and HashMap in Java:

Synchronization: HashTable is a synchronized data structure, meaning only one thread can access and modify the data at a time.
On the other hand, HashMap is not synchronized, allowing multiple threads to access and modify the data simultaneously.

Null keys and values: HashTable does not allow null keys or values, while HashMap allows one null key and any number of null values.

Performance: HashMap is generally faster than HashTable due to its non-synchronized nature.
However, in a multi-threaded environment, HashTable may perform better due to its synchronization.

Iteration: HashTable uses an Enumeration object to iterate over its elements, while HashMap uses an Iterator object.






What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.

RDBMS = Array (i.e. Array of structures)
Network data model = Graph
Hierarchical data model = Trees


How HashMap works in java?

HashMap is a part of the Java collection framework. It uses a technique called Hashing. It implements the map interface.
It stores the data in the pair of Key and Value. HashMap contains an array of the nodes, and the node is represented as a class.
It uses an array and LinkedList data structure internally for storing Key and Value.

What is ArrayIndexOutOfBoundsException in java? When it occurs?

The ArrayIndexOutOfBoundsException is a runtime exception in Java that occurs when an array is accessed with an illegal index.

What are the different ways of copying an array into another array?
Iterating each element of the given original array and copy one element at a time.
Using clone() method.
Using arraycopy() method.
Using copyOf() method of Arrays class.
Using copyOfRange() method of Arrays class.

What is difference between an array and a linked list?

Array elements can be accessed randomly using the array index.
Data elements are stored in contiguous locations in memory.
Insertion and Deletion operations are costlier since the memory locations are consecutive and fixed.
Memory is allocated during the compile time (Static memory allocation).
Size of the array must be specified at the time of array declaration/initialization.

Random accessing is not possible in linked lists. The elements will have to be accessed sequentially.
New elements can be stored anywhere and a reference is created for the new element using pointers.
Insertion and Deletion operations are fast and easy in a linked list.
Memory is allocated during the run-time (Dynamic memory allocation).
Size of a Linked list grows/shrinks as and when new elements are inserted/deleted.


What is DFS and BFS?

DFS (Depth First Search) is a search algorithm that starts at the root node of a tree or graph and explores as far as possible
along each branch before backtracking. It is used to traverse a tree or graph in a recursive manner, going as deep as possible before
backtracking and exploring other branches.

BFS (Breadth First Search) is a search algorithm that starts at the root node of a tree or graph and explores all the neighboring nodes
before moving to the next level of nodes. It is used to traverse a tree or graph in a level-by-level manner, starting from the root node
and moving through all the nodes on each level before moving to the next level.





What is Recursion?

Recursion is a programming concept where a function calls itself repeatedly until it meets a specific condition.
It is used to solve problems that can be broken down into smaller, repetitive steps. Each time the function calls itself,
it solves a smaller portion of the problem until the entire problem is solved.


What are linear and non linear data Structures?

Linear data structures are those in which the data elements are arranged in a sequential or linear fashion,
such as arrays, linked lists, and stacks. These data structures can only be accessed in a single direction,
either from the beginning to the end or vice versa.

Non-linear data structures are those in which the data elements are not arranged in a sequential fashion, such as trees and graphs.
These data structures can be accessed from multiple directions and can have multiple paths to reach a particular data element.


What is Big-(O)-notation?

Big-O notation is a mathematical notation used to describe the upper bound of an algorithm's complexity, or how long it
takes for the algorithm to run. It is used to determine the efficiency of an algorithm by measuring the number of steps
it takes to complete a task as the size of the input data increases.


Outlined different kind of sorting algorithm with time complexity?

Bubble Sort: Time complexity of O(n^2)
Insertion Sort: Time complexity of O(n^2)
Selection Sort: Time complexity of O(n^2)
Merge Sort: Time complexity of O(n*log(n))
Quick Sort: Time complexity of O(n*log(n))
Heap Sort: Time complexity of O(n*log(n))
Shell Sort: Time complexity of O(n^2)
Radix Sort: Time complexity of O(n)
Counting Sort: Time complexity of O(n)
Bucket Sort: Time complexity of O(n)


Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.





Data      Accessing Element 	Inserting Element	Searching Element	Removing Element
Array	      O(1)	                 O(n)	                   O(n)	             O(n)
Linked List   O(n)	                 O(1)	                   O(n)	             O(1)
Stack	      O(n)	                 O(1)	                   O(n)	             O(1)
Queue	      O(n)	                 O(1)	                   O(n)	             O(1)
Hash Table	  O(1)	                 O(1)                      O(1)	             O(1)
BST           O(h)	                 O(h)	                   O(h)	             O(h)
Heap	      O(n)              	O(logn)                    O(n)	           O(logn)
Graph	      O(n)	                O(1)	                   O(n)	             O(n)
